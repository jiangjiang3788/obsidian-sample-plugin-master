// test/unit/ThemeManager.test.ts
import { ThemeManager } from '@core/services/ThemeManager';
import { Theme } from '@core/domain/theme';
import { Item } from '@core/domain/schema';

describe('ThemeManager', () => {
    let manager: ThemeManager;

    beforeEach(() => {
        manager = new ThemeManager();
    });

    describe('È¢ÑÂÆö‰πâ‰∏ªÈ¢òÁÆ°ÁêÜ', () => {
        test('ÂàùÂßãÊó∂Â∫îËØ•Ê≤°Êúâ‰∏ªÈ¢ò', () => {
            const stats = manager.getThemeStats();
            expect(stats.total).toBe(0);
            expect(stats.predefined).toBe(0);
            expect(stats.active).toBe(0);
        });

        test('Â∫îËÉΩÊ∑ªÂä†ÈªòËÆ§‰∏ªÈ¢òÈõÜ', () => {
            manager.addDefaultThemes();
            const stats = manager.getThemeStats();
            expect(stats.total).toBe(5); // Â∑•‰Ωú„ÄÅÁîüÊ¥ª„ÄÅÂ≠¶‰π†„ÄÅÂÅ•Â∫∑„ÄÅÈ°πÁõÆ
            expect(stats.predefined).toBe(5);
            expect(stats.active).toBe(5);
        });

        test('Â∫îËÉΩÊ∑ªÂä†È¢ÑÂÆö‰πâ‰∏ªÈ¢ò', () => {
            const theme = manager.addPredefinedTheme('ÊµãËØï‰∏ªÈ¢ò', 'üß™');
            
            expect(theme).toBeDefined();
            expect(theme.path).toBe('ÊµãËØï‰∏ªÈ¢ò');
            expect(theme.icon).toBe('üß™');
            expect(theme.status).toBe('active');
            expect(theme.source).toBe('predefined');
        });

        test('Ê∑ªÂä†ÈáçÂ§ç‰∏ªÈ¢òÂ∫îÊõ¥Êñ∞Áé∞Êúâ‰∏ªÈ¢ò', () => {
            const theme1 = manager.addPredefinedTheme('ÈáçÂ§ç‰∏ªÈ¢ò', 'üîÅ');
            const theme2 = manager.addPredefinedTheme('ÈáçÂ§ç‰∏ªÈ¢ò', 'üîÑ');
            
            expect(theme1.id).toBe(theme2.id);
            expect(theme2.icon).toBe('üîÑ');
        });

        test('Â∫îÊîØÊåÅÂ§öÂ±ÇÁ∫ß‰∏ªÈ¢òË∑ØÂæÑ', () => {
            const theme = manager.addPredefinedTheme('È°πÁõÆ/ÂâçÁ´Ø/React');
            
            expect(theme.path).toBe('È°πÁõÆ/ÂâçÁ´Ø/React');
            expect(theme.name).toBe('React');
        });
    });

    describe('‰∏ªÈ¢òÂèëÁé∞Êú∫Âà∂', () => {
        test('Â∫îËÉΩÂèëÁé∞Êñ∞‰∏ªÈ¢ò', () => {
            const theme = manager.discoverTheme('Êñ∞ÂèëÁé∞ÁöÑ‰∏ªÈ¢ò');
            
            expect(theme).toBeDefined();
            expect(theme.status).toBe('inactive');
            expect(theme.source).toBe('discovered');
            expect(theme.usageCount).toBe(1);
            expect(theme.lastUsed).toBeDefined();
        });

        test('ÂèëÁé∞Â∑≤Â≠òÂú®‰∏ªÈ¢òÂ∫îÂ¢ûÂä†‰ΩøÁî®Ê¨°Êï∞', () => {
            const theme1 = manager.discoverTheme('ÈáçÂ§çÂèëÁé∞');
            const count1 = theme1.usageCount;
            
            const theme2 = manager.discoverTheme('ÈáçÂ§çÂèëÁé∞');
            
            expect(theme1.id).toBe(theme2.id);
            expect(theme2.usageCount).toBe(count1 + 1);
        });

        test('ÂèëÁé∞Á©∫‰∏ªÈ¢òÂ∫îÊäõÂá∫ÈîôËØØ', () => {
            expect(() => manager.discoverTheme('')).toThrow('‰∏ªÈ¢òË∑ØÂæÑ‰∏çËÉΩ‰∏∫Á©∫');
            expect(() => manager.discoverTheme('  ')).toThrow('‰∏ªÈ¢òË∑ØÂæÑ‰∏çËÉΩ‰∏∫Á©∫');
        });
    });

    describe('‰∏ªÈ¢òÊøÄÊ¥ª‰∏éÂÅúÁî®', () => {
        test('Â∫îËÉΩÊøÄÊ¥ª‰∏ªÈ¢ò', () => {
            const theme = manager.discoverTheme('ÂæÖÊøÄÊ¥ª‰∏ªÈ¢ò');
            manager.activateTheme('ÂæÖÊøÄÊ¥ª‰∏ªÈ¢ò');
            
            const updated = manager.getThemeByPath('ÂæÖÊøÄÊ¥ª‰∏ªÈ¢ò');
            expect(updated?.status).toBe('active');
        });

        test('ÊøÄÊ¥ªÂèëÁé∞ÁöÑ‰∏ªÈ¢òÂ∫îÊîπÂèòÂÖ∂Êù•Ê∫ê', () => {
            const theme = manager.discoverTheme('ÂèëÁé∞‰∏ªÈ¢ò');
            manager.activateTheme('ÂèëÁé∞‰∏ªÈ¢ò');
            
            const updated = manager.getThemeByPath('ÂèëÁé∞‰∏ªÈ¢ò');
            expect(updated?.source).toBe('predefined');
        });

        test('Â∫îËÉΩÂÅúÁî®ÈùûÈ¢ÑÂÆö‰πâ‰∏ªÈ¢ò', () => {
            const theme = manager.discoverTheme('ÂæÖÂÅúÁî®‰∏ªÈ¢ò');
            manager.activateTheme('ÂæÖÂÅúÁî®‰∏ªÈ¢ò');
            manager.deactivateTheme('ÂæÖÂÅúÁî®‰∏ªÈ¢ò');
            
            const updated = manager.getThemeByPath('ÂæÖÂÅúÁî®‰∏ªÈ¢ò');
            expect(updated?.status).toBe('inactive');
        });

        test('‰∏çËÉΩÂÅúÁî®ÂéüÂßãÈ¢ÑÂÆö‰πâ‰∏ªÈ¢ò', () => {
            const theme = manager.addPredefinedTheme('È¢ÑÂÆö‰πâ‰∏ªÈ¢ò');
            manager.deactivateTheme('È¢ÑÂÆö‰πâ‰∏ªÈ¢ò');
            
            const updated = manager.getThemeByPath('È¢ÑÂÆö‰πâ‰∏ªÈ¢ò');
            expect(updated?.status).toBe('active');
        });
    });

    describe('‰∏ªÈ¢òÊü•ËØ¢', () => {
        test('Â∫îËøîÂõûÊâÄÊúâÊøÄÊ¥ª‰∏ªÈ¢ò', () => {
            manager.addPredefinedTheme('‰∏ªÈ¢ò1');
            manager.addPredefinedTheme('‰∏ªÈ¢ò2');
            manager.discoverTheme('‰∏ªÈ¢ò3');
            
            const activeThemes = manager.getActiveThemes();
            const activeCount = activeThemes.filter(t => t.status === 'active').length;
            
            expect(activeCount).toBe(activeThemes.length);
        });

        test('ÊøÄÊ¥ª‰∏ªÈ¢òÂ∫îÊåâ‰ΩøÁî®Ê¨°Êï∞ÊéíÂ∫è', () => {
            manager.addPredefinedTheme('‰∏ªÈ¢òA');
            manager.addPredefinedTheme('‰∏ªÈ¢òB');
            
            // Êõ¥Êñ∞‰ΩøÁî®Ê¨°Êï∞
            manager.updateThemeUsage('‰∏ªÈ¢òB');
            manager.updateThemeUsage('‰∏ªÈ¢òB');
            manager.updateThemeUsage('‰∏ªÈ¢òA');
            
            const activeThemes = manager.getActiveThemes();
            const themeB = activeThemes.find(t => t.path === '‰∏ªÈ¢òB');
            const themeA = activeThemes.find(t => t.path === '‰∏ªÈ¢òA');
            
            expect(activeThemes[0].path).toBe('‰∏ªÈ¢òB');
            expect(themeB?.usageCount).toBeGreaterThan(themeA?.usageCount || 0);
        });

        test('Â∫îÊ≠£Á°ÆÂàÜÁ±ªÊâÄÊúâ‰∏ªÈ¢ò', () => {
            manager.addPredefinedTheme('È¢ÑÂÆö‰πâ1');
            manager.addPredefinedTheme('È¢ÑÂÆö‰πâ2');
            const discovered = manager.discoverTheme('ÂèëÁé∞1');
            manager.discoverTheme('ÂèëÁé∞2');
            manager.activateTheme('ÂèëÁé∞1');
            
            const allThemes = manager.getAllThemes();
            
            expect(allThemes.active.length).toBeGreaterThan(0);
            expect(allThemes.inactive.length).toBeGreaterThan(0);
            expect(allThemes.discovered.length).toBeGreaterThan(0);
        });
    });

    describe('‰ªéItemÊèêÂèñ‰∏ªÈ¢ò', () => {
        test('Â∫î‰ªé‰ªªÂä°ÁöÑheaderÊèêÂèñ‰∏ªÈ¢ò', () => {
            const item: Item = {
                id: 'test#1',
                type: 'task',
                title: '‰ªªÂä°Ê†áÈ¢ò',
                header: 'Â∑•‰ΩúËÆ°Âàí',
                content: '',
                tags: [],
                recurrence: 'none',
                created: 0,
                modified: 0,
                extra: {},
                categoryKey: '‰ªªÂä°/open',
                folder: 'test'
            };
            
            const theme = manager.extractTheme(item);
            expect(theme).toBe('Â∑•‰ΩúËÆ°Âàí');
        });

        test('Â∫î‰ªéÂùóÁöÑthemeÂ≠óÊÆµÊèêÂèñ‰∏ªÈ¢ò', () => {
            const item: Item = {
                id: 'test#2',
                type: 'block',
                title: 'ÂùóÊ†áÈ¢ò',
                theme: 'ÁîüÊ¥ª/Êó•Â∏∏',
                content: '',
                tags: [],
                recurrence: 'none',
                created: 0,
                modified: 0,
                extra: {},
                categoryKey: 'Âùó',
                folder: 'test'
            };
            
            const theme = manager.extractTheme(item);
            expect(theme).toBe('ÁîüÊ¥ª/Êó•Â∏∏');
        });

        test('Êó†‰∏ªÈ¢òÊó∂Â∫îËøîÂõûnull', () => {
            const item: Item = {
                id: 'test#3',
                type: 'task',
                title: '‰ªªÂä°Ê†áÈ¢ò',
                content: '',
                tags: [],
                recurrence: 'none',
                created: 0,
                modified: 0,
                extra: {},
                categoryKey: '‰ªªÂä°/open',
                folder: 'test'
            };
            
            const theme = manager.extractTheme(item);
            expect(theme).toBeNull();
        });
    });

    describe('ÊâπÈáèÊâ´Êèè‰∏ªÈ¢ò', () => {
        test('Â∫î‰ªéÊï∞ÊçÆÈ°π‰∏≠ÂèëÁé∞ÊâÄÊúâ‰∏ªÈ¢ò', () => {
            const items: Item[] = [
                {
                    id: '1',
                    type: 'task',
                    title: '‰ªªÂä°1',
                    header: '‰∏ªÈ¢òA',
                    content: '',
                    tags: [],
                    recurrence: 'none',
                    created: 0,
                    modified: 0,
                    extra: {},
                    categoryKey: '‰ªªÂä°/open',
                    folder: 'test'
                },
                {
                    id: '2',
                    type: 'task',
                    title: '‰ªªÂä°2',
                    header: '‰∏ªÈ¢òB',
                    content: '',
                    tags: [],
                    recurrence: 'none',
                    created: 0,
                    modified: 0,
                    extra: {},
                    categoryKey: '‰ªªÂä°/open',
                    folder: 'test'
                },
                {
                    id: '3',
                    type: 'block',
                    title: 'Âùó1',
                    theme: '‰∏ªÈ¢òC',
                    content: '',
                    tags: [],
                    recurrence: 'none',
                    created: 0,
                    modified: 0,
                    extra: {},
                    categoryKey: 'Âùó',
                    folder: 'test'
                }
            ];
            
            manager.scanDataForThemes(items);
            
            expect(manager.getThemeByPath('‰∏ªÈ¢òA')).toBeDefined();
            expect(manager.getThemeByPath('‰∏ªÈ¢òB')).toBeDefined();
            expect(manager.getThemeByPath('‰∏ªÈ¢òC')).toBeDefined();
        });

        test('Â∫îÊ≠£Á°ÆÊõ¥Êñ∞‰∏ªÈ¢ò‰ΩøÁî®ÁªüËÆ°', () => {
            const items: Item[] = [
                {
                    id: '1',
                    type: 'task',
                    title: '‰ªªÂä°1',
                    header: 'ÈáçÂ§ç‰∏ªÈ¢ò',
                    content: '',
                    tags: [],
                    recurrence: 'none',
                    created: 0,
                    modified: 0,
                    extra: {},
                    categoryKey: '‰ªªÂä°/open',
                    folder: 'test'
                },
                {
                    id: '2',
                    type: 'task',
                    title: '‰ªªÂä°2',
                    header: 'ÈáçÂ§ç‰∏ªÈ¢ò',
                    content: '',
                    tags: [],
                    recurrence: 'none',
                    created: 0,
                    modified: 0,
                    extra: {},
                    categoryKey: '‰ªªÂä°/open',
                    folder: 'test'
                }
            ];
            
            manager.scanDataForThemes(items);
            
            const theme = manager.getThemeByPath('ÈáçÂ§ç‰∏ªÈ¢ò');
            expect(theme?.usageCount).toBe(1); // scanDataForThemesÂè™ÂèëÁé∞‰∏ÄÊ¨°
        });
    });

    describe('‰∏ªÈ¢òÁªüËÆ°', () => {
        test('Â∫îËøîÂõûÊ≠£Á°ÆÁöÑÁªüËÆ°‰ø°ÊÅØ', () => {
            manager.clearThemes();
            manager.addPredefinedTheme('È¢ÑÂÆö‰πâ1');
            manager.addPredefinedTheme('È¢ÑÂÆö‰πâ2');
            manager.discoverTheme('ÂèëÁé∞1');
            manager.discoverTheme('ÂèëÁé∞2');
            manager.activateTheme('ÂèëÁé∞1');
            
            const stats = manager.getThemeStats();
            
            expect(stats.total).toBe(4);
            expect(stats.predefined).toBe(3); // È¢ÑÂÆö‰πâ2‰∏™ + ÂèëÁé∞1Ë¢´ÊøÄÊ¥ªÂèò‰∏∫predefined
            expect(stats.discovered).toBe(1); // Âè™ÊúâÂèëÁé∞2‰øùÊåÅdiscovered
            expect(stats.active).toBe(3);
            expect(stats.inactive).toBe(1);
        });
    });

    describe('‰∏ªÈ¢òÁÆ°ÁêÜÊìç‰Ωú', () => {
        test('Â∫îËÉΩÂà†Èô§ÈùûÈ¢ÑÂÆö‰πâ‰∏ªÈ¢ò', () => {
            manager.discoverTheme('ÂæÖÂà†Èô§‰∏ªÈ¢ò');
            const result = manager.removeTheme('ÂæÖÂà†Èô§‰∏ªÈ¢ò');
            
            expect(result).toBe(true);
            expect(manager.getThemeByPath('ÂæÖÂà†Èô§‰∏ªÈ¢ò')).toBeUndefined();
        });

        test('‰∏çËÉΩÂà†Èô§È¢ÑÂÆö‰πâ‰∏ªÈ¢ò', () => {
            manager.addPredefinedTheme('È¢ÑÂÆö‰πâ‰∏ªÈ¢ò');
            const result = manager.removeTheme('È¢ÑÂÆö‰πâ‰∏ªÈ¢ò');
            
            expect(result).toBe(false);
            expect(manager.getThemeByPath('È¢ÑÂÆö‰πâ‰∏ªÈ¢ò')).toBeDefined();
        });

        test('Â∫îËÉΩÊõ¥Êñ∞‰∏ªÈ¢òÂõæÊ†á', () => {
            manager.addPredefinedTheme('ÊµãËØï‰∏ªÈ¢ò', 'üîß');
            manager.updateThemeIcon('ÊµãËØï‰∏ªÈ¢ò', 'üéØ');
            
            const theme = manager.getThemeByPath('ÊµãËØï‰∏ªÈ¢ò');
            expect(theme?.icon).toBe('üéØ');
        });
    });

    describe('‰∏ªÈ¢òÂ±ÇÁ∫ßÁªìÊûÑ', () => {
        test('Â∫îÊ≠£Á°ÆÊûÑÂª∫‰∏ªÈ¢òÂ±ÇÁ∫ß', () => {
            manager.addPredefinedTheme('Áà∂‰∏ªÈ¢ò');
            manager.addPredefinedTheme('Áà∂‰∏ªÈ¢ò/Â≠ê‰∏ªÈ¢ò1');
            manager.addPredefinedTheme('Áà∂‰∏ªÈ¢ò/Â≠ê‰∏ªÈ¢ò2');
            
            const hierarchy = manager.getThemeHierarchy();
            
            // Ê†πÁ∫ßÂà´‰∏ªÈ¢ò
            const rootThemes = hierarchy.get(null);
            expect(rootThemes?.some(t => t.path === 'Áà∂‰∏ªÈ¢ò')).toBe(true);
            
            // Â≠ê‰∏ªÈ¢òÂ∫îÊúâÊ≠£Á°ÆÁöÑÁà∂ID
            const parentTheme = manager.getThemeByPath('Áà∂‰∏ªÈ¢ò');
            const childThemes = hierarchy.get(parentTheme?.id || '');
            expect(childThemes?.length).toBe(2);
        });
    });

    describe('ÂØºÂÖ•ÂØºÂá∫', () => {
        test('Â∫îËÉΩÂØºÂá∫ÊâÄÊúâ‰∏ªÈ¢ò', () => {
            manager.clearThemes();
            manager.addPredefinedTheme('‰∏ªÈ¢ò1');
            manager.addPredefinedTheme('‰∏ªÈ¢ò2');
            
            const exported = manager.exportThemes();
            
            expect(exported.length).toBe(2);
            expect(exported.some(t => t.path === '‰∏ªÈ¢ò1')).toBe(true);
            expect(exported.some(t => t.path === '‰∏ªÈ¢ò2')).toBe(true);
        });

        test('Â∫îËÉΩÂØºÂÖ•‰∏ªÈ¢ò', () => {
            const themes: Theme[] = [
                {
                    id: 'imported_1',
                    path: 'ÂØºÂÖ•‰∏ªÈ¢ò1',
                    name: 'ÂØºÂÖ•‰∏ªÈ¢ò1',
                    parentId: null,
                    status: 'active',
                    source: 'predefined',
                    usageCount: 5,
                    order: 0
                },
                {
                    id: 'imported_2',
                    path: 'ÂØºÂÖ•‰∏ªÈ¢ò2',
                    name: 'ÂØºÂÖ•‰∏ªÈ¢ò2',
                    parentId: null,
                    status: 'inactive',
                    source: 'discovered',
                    usageCount: 2,
                    order: 1
                }
            ];
            
            manager.importThemes(themes);
            
            expect(manager.getThemeByPath('ÂØºÂÖ•‰∏ªÈ¢ò1')).toBeDefined();
            expect(manager.getThemeByPath('ÂØºÂÖ•‰∏ªÈ¢ò2')).toBeDefined();
        });

        test('ÂØºÂÖ•ÈáçÂ§çIDÁöÑ‰∏ªÈ¢òÂ∫îË¢´ÂøΩÁï•', () => {
            const theme1: Theme = {
                id: 'duplicate_id',
                path: '‰∏ªÈ¢ò1',
                name: '‰∏ªÈ¢ò1',
                parentId: null,
                status: 'active',
                source: 'predefined',
                usageCount: 0,
                order: 0
            };
            
            const theme2: Theme = {
                id: 'duplicate_id',
                path: '‰∏ªÈ¢ò2',
                name: '‰∏ªÈ¢ò2',
                parentId: null,
                status: 'active',
                source: 'predefined',
                usageCount: 0,
                order: 1
            };
            
            manager.importThemes([theme1]);
            manager.importThemes([theme2]);
            
            const result = manager.getThemeByPath('‰∏ªÈ¢ò1');
            expect(result).toBeDefined();
            expect(manager.getThemeByPath('‰∏ªÈ¢ò2')).toBeUndefined();
        });
    });

    describe('Ê∏ÖÈô§‰∏ªÈ¢ò', () => {
        test('Ê∏ÖÈô§ÂêéÂ∫îÊ≤°Êúâ‰ªª‰Ωï‰∏ªÈ¢ò', () => {
            manager.addPredefinedTheme('È¢ÑÂÆö‰πâ‰∏ªÈ¢ò');
            manager.discoverTheme('‰∏¥Êó∂‰∏ªÈ¢ò');
            const statsBefore = manager.getThemeStats();
            expect(statsBefore.total).toBeGreaterThan(0);
            
            manager.clearThemes();
            
            const statsAfter = manager.getThemeStats();
            expect(statsAfter.total).toBe(0);
            expect(statsAfter.discovered).toBe(0);
            expect(statsAfter.predefined).toBe(0);
            expect(manager.getThemeByPath('‰∏¥Êó∂‰∏ªÈ¢ò')).toBeUndefined();
            expect(manager.getThemeByPath('È¢ÑÂÆö‰πâ‰∏ªÈ¢ò')).toBeUndefined();
        });
    });
});
